<?php


namespace App\Tests\Integration\Narrative;


use App\Repository\FragmentRepository;
use App\Repository\NarrativeRepository;

class NarraticeResourceCreateTest extends AbstractNarrativeResourceTest
{
    public function testCreateNarrative()
    {
        $title = 'Title example from phpunit';
        $content = 'This content is generated by testPostNarrative';

        // we use the container for test of Symfony that let us use "private" services
        $container = self::$container;
        $narrativeRepository = $container->get(NarrativeRepository::class);
        $fragmentRepository = $container->get(FragmentRepository::class);

        // at first, we count the number of existing narratives
        $this->assertEquals(2, count($narrativeRepository->findAll()), 'Uncorrect number of narratives');

        // and we count fragments
        $this->assertEquals(3, count($fragmentRepository->findAll()), 'Uncorrect number of fragments');

        $data = [
            'uuid' => '6153ca18-47a9-4b38-ae72-29e8340060cb',
            'title' => $title,
            'content' => $content
        ];

        $response = $this->client->request('POST', 'api/narratives', [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => $data
        ]);

        $arrayResponse = $response->toArray();
        $this->assertResponseIsSuccessful();
        $this->assertEquals($title, $arrayResponse['title']);
        $this->assertEquals($content, $arrayResponse['content']);
        // createdAt must be equal to updatedAt because a new narrative is created
        $this->assertEquals($arrayResponse['createdAt'], $arrayResponse['updatedAt']);

        // now, we check in database if everything is correct
        // we are supposed to have one more narrative and one more fragment
        $this->assertEquals(3, count($narrativeRepository->findAll()), 'Uncorrect number of narratives');
        $this->assertEquals(4, count($fragmentRepository->findAll()), 'Uncorrect number of fragments');

        // we check if we get our new narrative with a GET call
        $response =  $this->client->request('GET', 'api/narratives', [
            'headers' => ['Content-Type' => 'application/json']
        ]);

        $this->assertResponseIsSuccessful();
        $arrayResponse = $response->toArray();
        $this->assertEquals($title, $arrayResponse['hydra:member'][2]['title']);
        $this->assertEquals($content, $arrayResponse['hydra:member'][2]['content']);
    }

    public function testCreateFragmentWithoutUuid()
    {
        $title = 'Title example from phpunit';
        $content = 'This content is generated by testPostNarrative';

        $data = [
            'title' => $title,
            'content' => $content
        ];

        $response = $this->client->request('POST', 'api/narratives', [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => $data
        ]);

        $this->assertResponseStatusCodeSame(500);
    }

    public function testCreateFragmentWithoutContent()
    {
        $title = 'Title example from phpunit';

        $data = [
            'title' => $title,
        ];

        $this->client->request('POST', 'api/narratives', [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => $data
        ]);

        $this->assertResponseStatusCodeSame(500);
    }

    public function testCreateFragmentWithoutTitle()
    {
        $title = 'Title example from phpunit';
        $content = 'This content is generated by testPostNarrative';


        $data = [
            'title' => $title,
            'content' => $content
        ];

        $this->client->request('POST', 'api/narratives', [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => $data
        ]);

        $this->assertResponseStatusCodeSame(500);
    }

}