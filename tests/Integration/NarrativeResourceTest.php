<?php

declare(strict_types=1);

namespace App\Tests\Integration;

use App\Repository\FragmentRepository;
use App\Repository\NarrativeRepository;
use Liip\TestFixturesBundle\Test\FixturesTrait;

/**
 * Class NarrativeResourceTest
 * @package App\Tests\Integration
 */
class NarrativeResourceTest extends EdoApiTestCase
{
    use FixturesTrait;

    private $data;

    private $title;

    private $content;

    private $narrativeRepository;

    private $fragmentRepository;

    public function setUp()
    {
        parent::setUp();

        $this->title = 'Title example from phpunit';
        $this->content = 'This content is generated by testPostNarrative';

        $this->data = [
            'uuid' => '6153ca18-47a9-4b38-ae72-29e8340060cb',
            'title' => $this->title,
            'content' => $this->content
        ];

        $container = self::$container;
        $this->narrativeRepository = $container->get(NarrativeRepository::class);
        $this->fragmentRepository = $container->get(FragmentRepository::class);
    }

    /**
     * @Description = send GET request for one specific fragment
     */
    public function testGetNarrativeWithFragments()
    {
        $uuid = '6284e5ac-09cf-4334-9503-dedf31bafdd0';

        $response = $this->client->request('GET', 'api/narratives/'.$uuid);

        $this->assertResponseIsSuccessful();
        $arrayResponse = $response->toArray();
        $this->assertEquals(2, count($arrayResponse['fragments']));
        $this->assertEquals($arrayResponse['fragments'][1]['title'], 'Fragment title');
        $this->assertEquals($arrayResponse['fragments'][0]['title'], 'Fragment title 2');
        $this->assertEquals($arrayResponse['uuid'], '6284e5ac-09cf-4334-9503-dedf31bafdd0');
        $this->assertEquals($arrayResponse['content'], $arrayResponse['fragments'][0]['content']);
    }

    public function testGetNarrativesCollection()
    {
        // send GET request
        $response =  $this->client->request('GET', 'api/narratives', [
            'headers' => ['Content-Type' => 'application/json']
        ]);

        $this->assertResponseIsSuccessful();
        $arrayResponse = $response->toArray();
        $this->assertCount(2, $arrayResponse['hydra:member']);
        $this->assertEquals('Fragment title 2', $arrayResponse['hydra:member'][0]['title']);
        $this->assertNotNull($arrayResponse['hydra:member'][1]['uuid']);
    }

    public function testGetNarrativeWithIncorrectUuid()
    {
        $uuid = 'cakeIsALie';
        $this->client->request('GET', 'api/narratives/'.$uuid);
        $this->assertResponseStatusCodeSame(500);
    }

    public function testGetNarrativeWithUnkwnonUuid()
    {
        $uuid = '9f6e6490-85f3-4d4e-82fd-e725a884fd8e';
        $this->client->request('GET', 'api/narratives/'.$uuid);
        $this->assertResponseStatusCodeSame(404);
    }

    public function testCreateNarrative()
    {
        $title = 'Title example from phpunit';
        $content = 'This content is generated by testPostNarrative';

        // we use the container for test of Symfony that let us use "private" services
        $container = self::$container;
        $narrativeRepository = $container->get(NarrativeRepository::class);
        $fragmentRepository = $container->get(FragmentRepository::class);

        // at first, we count the number of existing narratives
        $this->assertEquals(2, count($narrativeRepository->findAll()), 'Uncorrect number of narratives');

        // and we count fragments
        $this->assertEquals(3, count($fragmentRepository->findAll()), 'Uncorrect number of fragments');

        $data = [
            'uuid' => '6153ca18-47a9-4b38-ae72-29e8340060cb',
            'title' => $title,
            'content' => $content
        ];

        $response = $this->client->request('POST', 'api/narratives', [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => $data
        ]);

        $arrayResponse = $response->toArray();
        $this->assertResponseIsSuccessful();
        $this->assertEquals($title, $arrayResponse['title']);
        $this->assertEquals($content, $arrayResponse['content']);
        // createdAt must be equal to updatedAt because a new narrative is created
        $this->assertEquals($arrayResponse['createdAt'], $arrayResponse['updatedAt']);

        // now, we check in database if everything is correct
        // we are supposed to have one more narrative and one more fragment
        $this->assertEquals(3, count($narrativeRepository->findAll()), 'Uncorrect number of narratives');
        $this->assertEquals(4, count($fragmentRepository->findAll()), 'Uncorrect number of fragments');

        // we check if we get our new narrative with a GET call
        $response =  $this->client->request('GET', 'api/narratives', [
            'headers' => ['Content-Type' => 'application/json']
        ]);

        $this->assertResponseIsSuccessful();
        $arrayResponse = $response->toArray();
        $this->assertEquals($title, $arrayResponse['hydra:member'][2]['title']);
        $this->assertEquals($content, $arrayResponse['hydra:member'][2]['content']);
    }

    public function testCreateFragmentWithoutUuid()
    {
        $title = 'Title example from phpunit';
        $content = 'This content is generated by testPostNarrative';

        $data = [
            'title' => $title,
            'content' => $content
        ];

        $response = $this->client->request('POST', 'api/narratives', [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => $data
        ]);

        $this->assertResponseStatusCodeSame(500);
    }

    public function testCreateFragmentWithoutContent()
    {
        $title = 'Title example from phpunit';

        $data = [
            'title' => $title,
        ];

        $this->client->request('POST', 'api/narratives', [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => $data
        ]);

        $this->assertResponseStatusCodeSame(500);
    }

    public function testCreateFragmentWithoutTitle()
    {
        $title = 'Title example from phpunit';
        $content = 'This content is generated by testPostNarrative';


        $data = [
            'title' => $title,
            'content' => $content
        ];

        $this->client->request('POST', 'api/narratives', [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => $data
        ]);

        $this->assertResponseStatusCodeSame(500);
    }

    public function testCreateNewFragmentForExistingNarrative()
    {
        // at first, we count the number of existing narratives
        $this->assertEquals(2, count($this->narrativeRepository->findAll()), 'Uncorrect number of narratives');

        // and we count fragments
        $this->assertEquals(3, count($this->fragmentRepository->findAll()), 'Uncorrect number of fragments');

        // send request to create a new fragment for an existing narrative
        $this->data['uuid'] = '6284e5ac-09cf-4334-9503-dedf31bafdd0';

        // create a new fragment for an existing narrative
        $this->client->request('POST', 'api/narratives', [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => $this->data
        ]);

        $this->assertResponseIsSuccessful();

        // there are no more narratives but one more fragments
        $this->assertEquals(2, count($this->narrativeRepository->findAll()), 'Uncorrect number of narratives');
        $this->assertEquals(4, count($this->fragmentRepository->findAll()), 'Uncorrect number of fragments');

        // get the updated narrative
        $response = $this->client->request('GET', 'api/narratives/'.$this->data['uuid']);
        $arrayResponse = $response->toArray();

        // check if there is one more fragment
        $this->assertEquals(3, count($arrayResponse['fragments']));

        // check the fragment data
        $this->assertEquals($arrayResponse['fragments'][0]['title'], $this->title);
        $this->assertNotEquals($arrayResponse['fragments'][0]['title'], $arrayResponse['fragments'][2]['title']);
        $this->assertEquals($arrayResponse['fragments'][0]['content'], $this->content);

        // check if narrative infos has been correctly updated
        $this->assertEquals($arrayResponse['title'], $this->title);
        $this->assertEquals($arrayResponse['content'], $this->content);
        $this->assertEquals($arrayResponse['uuid'], '6284e5ac-09cf-4334-9503-dedf31bafdd0');
    }

    public function testUpdateNarrativeBaseData()
    {
        //todo : to implement
    }

}